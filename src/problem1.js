/* 
  기능 목록
  - 예외 처리
    - 연속하는 숫자인지
    - 범위에 속하는지
  - 규칙 적용
    - 1자리 수로 분해한 배열 만들기
    - 분해한 수 배열 원소들을 모두 더하기
    - 분해한 수 배열 원소들을 모두 곱하기
    - 모든 연산 결과중에서 최대값(플레이어의 점수) 구하기
    - 점수를 비교하여 조건에 따라 특정 값 반환

  아이디어
  - 숫자_분해하기: 함수 10의 거듭제곱으로 나눈 몫과 나머지로 구하기
*/

function 숫자_분해하기(숫자) {
  return String(숫자).split("").map(Number);
}

function 더하기(숫자_배열) {
  return 숫자_배열.reduce((합, 수) => 합 + 수, 0);
}

function 곱하기(숫자_배열) {
  return 숫자_배열.reduce((합, 수) => 합 * 수, 1);
}

function 함수_호출_결과_생성하기(배열, 함수_배열) {
  return 함수_배열.reduce((함수_결과_배열, 함수) => {
    함수_결과_배열.push(함수(배열));

    return 함수_결과_배열;
  }, []);
}

function 연속하는_숫자라면(숫자_배열) {
  const [시작_숫자] = 숫자_배열;

  for (let 인덱스 = 1; 인덱스 < 숫자_배열.length; 인덱스 += 1) {
    if (숫자_배열[인덱스] !== 시작_숫자 + 인덱스) return false;
  }

  return true;
}

function 범위_함수_생성하기(시작, 끝) {
  return (숫자) => 시작 < 숫자 && 숫자 < 끝;
}

function 배열이_범위에_속한다면(배열) {
  const 범위에_속한다면 = 범위_함수_생성하기(1, 400);

  return 배열.every(범위에_속한다면);
}

function 예외라면(숫자_배열) {
  const 규칙_함수_배열 = [연속하는_숫자라면, 배열이_범위에_속한다면];
  const 규칙_결과_배열 = 함수_호출_결과_생성하기(숫자_배열, 규칙_함수_배열);

  return 규칙_결과_배열.some((규칙_결과) => !규칙_결과);
}

function 덧셈_곱셈_구하기(숫자_배열) {
  return 함수_호출_결과_생성하기(숫자_배열, [더하기, 곱하기]);
}

function 연산_결과_구하기(숫자_배열) {
  return 숫자_배열
    .map(숫자_분해하기)
    .map(덧셈_곱셈_구하기)
    .flatMap((덧셈_곱셈_결과_배열) => 덧셈_곱셈_결과_배열);
}

function 최댓값_구하기(숫자_배열) {
  return Math.max(...연산_결과_구하기(숫자_배열));
}

function 승부_결과_구하기(선수1의_점수, 선수2의_점수) {
  if (선수1의_점수 > 선수2의_점수) return 1;

  if (선수1의_점수 < 선수2의_점수) return 2;

  return 0;
}

function problem1(선수1_페이지_번호_배열, 선수2_페이지_번호_배열) {
  if (예외라면(선수1_페이지_번호_배열) || 예외라면(선수2_페이지_번호_배열))
    return -1;

  const 선수1의_점수 = 최댓값_구하기(선수1_페이지_번호_배열);
  const 선수2의_점수 = 최댓값_구하기(선수2_페이지_번호_배열);

  return 승부_결과_구하기(선수1의_점수, 선수2의_점수);
}

module.exports = problem1;
